from aiogram import html
from aiogram.types import BufferedInputFile, InputFile
from sqlalchemy.ext.asyncio import AsyncSession

from app.src.services.db import db_requests
from app.src.services.db.models import TTSVoice
from app.src.services.openai import (
    get_image_from_gpt,
    get_response_from_gpt,
    text_to_speech,
)


async def get_messages_to_request(
    session: AsyncSession, user_id: int, text: str
) -> list[dict[str, str]]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –≤ openai –∏–∑ –±–∞–∑—ã –∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏—Ö —Å —Ç–µ–∫—É—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º"""
    dialogs = await db_requests.get_dialogs(session, user_id)
    messages = []
    for dialog in dialogs:
        messages.append({"role": dialog.role, "content": dialog.content})
    messages.append({"role": "user", "content": text})
    await db_requests.add_dialog(session, user_id, "user", text)
    return messages


async def add_role_for_dialog(session: AsyncSession, user_id: int, text: str):
    """–î–æ–≤–∞–±–ª–µ–Ω–∏–µ —Ä–æ–ª–∏ –¥–ª—è –¥–∏–∞–ª–æ–≥–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    await db_requests.add_dialog(session, user_id, "system", text)


async def response_from_gpt(session: AsyncSession, user_id: int, message: str) -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç openai, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –µ–≥–æ –≤ –ë–î"""
    messages_to_request = await get_messages_to_request(session, user_id, message)
    response = await get_response_from_gpt(messages_to_request)
    if response is None:
        return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç"
    response = html.quote(response)
    await db_requests.add_dialog(session, user_id, "assistant", response)
    return response


async def response_audio(
    session: AsyncSession, user_id: int, text: str
) -> InputFile | None:
    """–ü–æ–ª—É—á–∞–µ—Ç –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ –æ—Ç openai –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–∏–≤–∞–µ—Ç
    –∏—Ö –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ –¢–ì"""
    settings = await db_requests.get_settings(session, user_id)
    if settings.tts_voice == TTSVoice.NOT_SELECT:
        return
    response = await text_to_speech(text, settings.tts_voice.value)
    return BufferedInputFile(response, "audio")


async def generate_image(session: AsyncSession, user_id: int, text: str) -> str | None:
    settings = await db_requests.get_settings(session, user_id)
    image_url = await get_image_from_gpt(
        text, settings.image_format.value, settings.image_style.value
    )
    return image_url


async def clear_dialog_context(session: AsyncSession, user_id: int):
    """–û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞ –∏ —Ä–æ–ª–∏"""
    await db_requests.remove_dialogs_by_user_id(session, user_id)


# async def show_generation_status(wait_message: Message):
#     """–°–æ–∑–¥–∞–µ—Ç –¥–∏–Ω–∞–º–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–º–µ–Ω–∞—é—â–∏–º–∏—Å—è —Å—Ç–∞—Ç—É—Å–∞–º–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞"""
#     animation_frames = [
#         "‚†Ä\n‚è≥ –ó–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É...\n‚†Ä",
#         "‚†Ä\n‚ùáÔ∏è –ì–æ—Ç–æ–≤–∏—Ç—Å—è –æ—Ç–≤–µ—Ç...\n‚†Ä",
#         # "‚†Ä\nüó£ –°–∏–Ω—Ç–µ–∑–∏—Ä—É–µ—Ç—Å—è –≥–æ–ª–æ—Å...\n‚†Ä",
#     ]
#     frame_index = 0
#     while True:
#         await asyncio.sleep(1)
#         try:
#             await wait_message.edit_text(animation_frames[frame_index])
#             frame_index = (frame_index + 1) % len(animation_frames)
#         except TelegramRetryAfter:
#             await asyncio.sleep(1)
#         except TelegramBadRequest:
#             frame_index = (frame_index + 1) % len(animation_frames)
#             await wait_message.answer(animation_frames[frame_index])
